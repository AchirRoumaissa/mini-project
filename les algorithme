import java.util.*;

public class TransitiveClosureColoring {
    
    private int[][] graph;
    private int[][] transitiveClosure;
    private int[] colors;
    private int numVertices;
    private int numColors;

    public TransitiveClosureColoring(int[][] graph, int numColors) {
        this.graph = graph;
        this.numVertices = graph.length;
        this.numColors = numColors;
        this.transitiveClosure = new int[numVertices][numVertices];
        this.colors = new int[numVertices];
    }

    public void computeTransitiveClosure() {
        for (int i = 0; i < numVertices; i++) {
            for (int j = 0; j < numVertices; j++) {
                transitiveClosure[i][j] = graph[i][j];
            }
        }
        
        for (int k = 0; k < numVertices; k++) {
            for (int i = 0; i < numVertices; i++) {
                for (int j = 0; j < numVertices; j++) {
                    transitiveClosure[i][j] = transitiveClosure[i][j] | (transitiveClosure[i][k] & transitiveClosure[k][j]);
                }
            }
        }
    }

    public void colorGraph() {
        Arrays.fill(colors, -1);

        for (int i = 0; i < numVertices; i++) {
            if (colors[i] == -1) {
                colorVertex(i);
            }
        }
    }

    private void colorVertex(int vertex) {
        boolean[] availableColors = new boolean[numColors];
        Arrays.fill(availableColors, true);

        for (int i = 0; i < numVertices; i++) {
            if (transitiveClosure[vertex][i] == 1 && colors[i] != -1) {
                availableColors[colors[i]] = false;
            }
        }

        for (int i = 0; i < numColors; i++) {
            if (availableColors[i]) {
                colors[vertex] = i;
                break;
            }
        }
    }

    public void printColors() {
        for (int i = 0; i < numVertices; i++) {
            System.out.println("Vertex " + i + " is colored with color " + colors[i]);
        }
    }

    public static void main(String[] args) {
        int[][] graph = {
            {0, 1, 0, 0},
            {0, 0, 1, 0},
            {0, 0, 0, 1},
            {1, 0, 0, 0}
        };
        int numColors = 3;

        TransitiveClosureColoring tcColoring = new TransitiveClosureColoring(graph, numColors);
        tcColoring.computeTransitiveClosure();
        tcColoring.colorGraph();
        tcColoring.printColors();
    }
}
